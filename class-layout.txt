Board
Represents a game board, i.e. a graph of territories
Used to initialize many territories and interconnect them

Data:
   spaces - An array of territories
   vertices - Represents connections

Methods:
   Board()
   Board(String path) - Loads info from file
   Board(Territory[] spaces, String[][] vertices)

   Territory getTerritory(String name)
      - Returns the named territory's reference

   void loadFromFile(String path)
      - Creates territories and establishes connections
         based on information in a formatted file

   String toString()

Note:
Contains two helper methods, parseLine() splits up a line into
   an array of tokens, initializeConnections parses vertices and 
   adds connections based on it.

File Format:#ofterr #ofvertices
            terr_name value crown(1 or 0) cname // Territory info
            ...                                 // Continue
            CONNECTIONS                         // To switch mode
            name1 name2 name3                   // Vertex info
            ...                                 // Continue

----------------------------------------------------------------------


Territory
Represents a territory (or space) on a game board

Data:
   name - A string of the space's name
   value - Tax value of space
   connections - An array of other spaces connected
   attackers - An army that is attacking 
   unit - An army that occupies the territory
   crown - Is the space a crown space?
   castle - Is there a castle?

Methods:
   Territory(String name, int value, Territory[] connection, ...)
      - Covers all data fields in order
   Territory(String name, int value, boolean crown)
      - Covers the fundamental data
   Territory() - Fills with default values

   boolean isDisputed() - Checks if disputed (has attacker)
   boolean isAdjacent(Territory other)
      - Checks if the other territory is connected
   void addConnection(Territory newTerr)
      - Connects newTerr and the caller to each other

   void setUnit(Army unit)
   void setAttackers(Army attackers)
   void setName(String name)
   void setValue(int value)
   void setConnections(Territory[] connections)
   void setCrown(boolean crown)
   void setCastle(boolean castle)

   Army getAttackers()
   boolean hasCastle()
   boolean hasCrown()
   String getName()
   Army getUnit()
   int getValue()
   Territory[] getConnections()

   String toString()


-------------------------------------------------------------------------



Army 
Represents an army, should be associated with a player

Data:
   units[4] - The array that stores unit counts
   unitTotal - Total number of units

Methods: 
   Army(int foot, int archer, int cavalry, int siege)

   int getTotal() - returns unitTotal
   int getFoot() - returns footsoldier count (units[0])
   int getArcher() - returns archer count (units[1])
   int getCavalry() - returns cavalry count (units[2])
   int getSiege() - returns siege unit count (units[3])

   int totalValue() - returns total value of all units
   void destroyUnits(int hits) - removes the lowest-value unit for each hit
   void combine(Army other) - adds the other army's values to itself
   Army split(f,a,c,d) - returns an army of units from the caller

   String toString()
